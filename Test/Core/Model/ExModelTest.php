<?php

namespace Test\Core;

use Core\Collection\ModelCollection;
use Core\Model\IModel;
use Test\Core\Model\ExModel;

class ExModelTest extends \PHPUnit\Framework\TestCase
{
    protected $ExModel;
    protected $ExModel_hash;
    protected $object_subject = null;

    /*
     * Метод при загрузке
     * */
    protected function setUp(): void
    {
        $this->ExModel = new ExModel();

        $this->ExModel->name = 'name1';

        $this->ExModel_hash = $this->ExModel->getHash();
    }

    public function testName()
    {
        $this->assertEquals('name1', $this->ExModel->name);
    }

    /**
     * @dataProvider ExModelNameProvider
     * @param $name
     */
    public function testCreate($name): void
    {
        $create = ExModel::create(['name' => $name]);

        $this->assertInstanceOf(IModel::class, $create);
    }

    public function testAll(): void
    {
        foreach (ExModel::all() as $item) {
            $this->assertInstanceOf(IModel::class, $item);
        }
    }

    public function testFind(): void
    {
        $hashArray = ModelCollection::getHashArray();
        $key = array_rand($hashArray);

        $this->assertInstanceOf(
            IModel::class,
            ExModel::find($hashArray[$key])
        );
    }

    public function testUpdate()
    {
        $hashArray = ModelCollection::getHashArray();

        $key = array_rand($hashArray);

        $data = ['name' => 'name4'];

        $this->assertInstanceOf(
            IModel::class,
            ExModel::update($hashArray[$key], $data)
        );

        $this->assertEquals(
            $data['name'],
            ExModel::find($hashArray[$key])->name
        );
    }

    public function testRemove()
    {
        $hashArray = ModelCollection::getHashArray();

        $key = array_rand($hashArray);

        $res = ExModel::remove($hashArray[$key]);

        $this->assertEquals(true, $res);
    }


    public function ExModelNameProvider()
    {
        return [
            ['name1'],
            ['name2'],
            ['name3'],
            ['name4'],
            ['name5']
        ];
    }

    public function testHash()
    {
        $this->assertEquals($this->ExModel_hash, $this->ExModel->getHash());
    }


    /*
    * Метод после теста
    * */
    protected function tearDown(): void
    {
        parent::tearDown(); // TODO: Change the autogenerated stub

        unset($this->ExModel);
        unset($this->ExModel_hash);
        unset($this->hash_keys);
    }
}
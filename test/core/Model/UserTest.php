<?php

namespace Test\Core;

use Core\Collection\ModelCollection;
use Core\Model\IModel;
use Test\Core\Model\User;

class UserTest extends \PHPUnit\Framework\TestCase
{
    protected $user;
    protected $user_hash;
    protected $object_subject = null;

    /*
     * Метод при загрузке
     * */
    protected function setUp(): void
    {
        $this->user = new User();

        $this->user->name = 'name1';

        $this->user_hash = $this->user->getHash();
    }

    public function testName()
    {
        $this->assertEquals('name1', $this->user->name);
    }

    /**
     * @dataProvider userNameProvider
     * @param $name
     */
    public function testCreate($name): void
    {
        $create = $this->user->create(['name' => $name]);

        $this->assertInstanceOf(IModel::class, $create);
    }

    public function testAll(): void
    {
        foreach ($this->user->all() as $item) {
            $this->assertInstanceOf(IModel::class, $item);
        }
    }

    public function testFind(): void
    {
        $hashArray = ModelCollection::getHashArray();
        $key = array_rand($hashArray);

        $this->assertInstanceOf(IModel::class,
            $this->user->find($hashArray[$key]));
    }

    public function testUpdate()
    {
        $hashArray = ModelCollection::getHashArray();

        $key = array_rand($hashArray);

        $data = ['name' => 'name4'];

        $this->assertInstanceOf(IModel::class,
            $this->user->update($hashArray[$key], $data));

        $this->assertEquals($data['name'],
            $this->user->find($hashArray[$key])->name);
    }

    public function testRemove()
    {
        $hashArray = ModelCollection::getHashArray();

        $key = array_rand($hashArray);

        $res = $this->user->remove($hashArray[$key]);

        $this->assertEquals(true, $res);
    }

    public function userNameProvider()
    {
        return [
            ['name1'],
            ['name2'],
            ['name3'],
        ];
    }

    public function testHash()
    {
        $this->assertEquals($this->user_hash, $this->user->getHash());
    }


    /*
    * Метод после теста
    * */
    protected function tearDown(): void
    {
        parent::tearDown(); // TODO: Change the autogenerated stub

        unset($this->user);
        unset($this->user_hash);
        unset($this->hash_keys);
    }
}